generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Kind {
  kindId    String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orderItems OrderItem[]
}

model Order {
  orderId         String   @id @default(uuid())
  userId          String
  quantity        Int
  totalPrice      Float
  status          String   @default("pending")
  deliveryAddress String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  orderItems OrderItem[]
}

model OrderItem {
  orderItemId String   @id @default(uuid())
  orderId     String
  pizzaId     String
  kindId      String
  sizeId      String
  quantity    Int
  totalPrice  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  kind  Kind  @relation(fields: [kindId], references: [kindId], onDelete: Cascade, onUpdate: Cascade)
  order Order @relation(fields: [orderId], references: [orderId], onDelete: Cascade, onUpdate: Cascade)
  pizza Pizza @relation(fields: [pizzaId], references: [pizzaId], onDelete: Cascade, onUpdate: Cascade)
  size  Size  @relation(fields: [sizeId], references: [sizeId], onDelete: Cascade, onUpdate: Cascade)

  orderItemToppings OrderItemTopping[]
}

model OrderItemTopping {
  orderItemToppingId String   @id @default(uuid())
  orderItemId        String
  toppingId          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  orderItem OrderItem @relation(fields: [orderItemId], references: [orderItemId], onDelete: Cascade, onUpdate: Cascade)
  topping   Topping   @relation(fields: [toppingId], references: [toppingId], onDelete: Cascade, onUpdate: Cascade)
}

model Pizza {
  pizzaId     String   @id @default(uuid())
  name        String
  description String
  price       Float
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  orderItems OrderItem[]
}

model Role {
  roleId    String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userRoles UserRole[]
}

model Size {
  sizeId    String   @id @default(uuid())
  name      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orderitems OrderItem[]
}

model Topping {
  toppingId String   @id @default(uuid())
  name      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orderItemToppings OrderItemTopping[]
}

model User {
  userId    String   @id @default(uuid())
  name      String
  surname   String
  phone     String
  email     String   @unique()
  address   String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orders    Order[]
  userRoles UserRole[]
}

model UserRole {
  userRoleId String   @id
  userId     String
  roleId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  role Role @relation(fields: [roleId], references: [roleId], onDelete: Cascade, onUpdate: Cascade)
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}
