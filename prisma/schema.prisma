// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  userId String @id @default(uuid())
  name String
  surname String
  phone String
  email String @unique
  address String
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

model Pizza{
  pizzaId String @id @default(uuid())
  name String
  description String
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orderItems OrderItem[]
}

model Order{
  orderId String @id @default(uuid())
  userId String
  quantity Int
  totalPrice Float
  status String @default("pending") // pending, completed, cancelled
  deliveryAddress String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  orderItems OrderItem[]
}

model Size{
  sizeId String @id @default(uuid())
  name String
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]
 
}

model Topping{
  toppingId String @id @default(uuid())
  name String
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItemToppings OrderItemTopping[]
}
model Kind{
  kindId String @id @default(uuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

 orderItems OrderItem[]
}

model OrderItem{
  orderItemId String @id @default(uuid())
  orderId String
  pizzaId String
  kindId String
  sizeId String
  quantity Int
  totalPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [orderId], onDelete: Cascade, onUpdate: Cascade)
  pizza Pizza @relation(fields: [pizzaId], references: [pizzaId], onDelete: Cascade, onUpdate: Cascade)
  size Size @relation(fields: [sizeId], references: [sizeId], onDelete: Cascade, onUpdate: Cascade)
  kind Kind @relation(fields: [kindId], references: [kindId], onDelete: Cascade, onUpdate: Cascade)

  toppings OrderItemTopping[]
}

model OrderItemTopping{
  orderItemToppingId String @id @default(uuid())
  orderItemId String
  toppingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItem OrderItem @relation(fields: [orderItemId], references: [orderItemId], onDelete: Cascade, onUpdate: Cascade)
  topping Topping @relation(fields: [toppingId], references: [toppingId], onDelete: Cascade, onUpdate: Cascade)
}

